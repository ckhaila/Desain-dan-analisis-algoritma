#Adjacency Matrix
import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0],
                             [0, 0, 1, 0],
                             [0, 1, 0, 1],
                             [1, 0, 1, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")

#Membuat Graph dari Adjacency Matrix
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0],
                             [0, 0, 1, 0],
                             [0, 1, 0, 1],
                             [1, 0, 1, 0]])
# Create a directed graph
G = nx.DiGraph()

# Add nodes
num_pages = len(adjacency_matrix)
G.add_nodes_from(range(num_pages))

#Add edges based on the adjacency matrix
for i in range(num_pages):
  for j in range(num_pages):
    if adjacency_matrix[i, j]==1:
        G.add_edge(i, j)

# Draw the graph
pos = nx.spring_layout(G) # Layout the graph
labels = {i: f"Page {i+1}" for i in range(num_pages)}
nx.draw(G, pos, with_labels=True, labels=labels, node_size=1000, node_color='lightblue', font_size=10, font_color='black', font_weight='bold', arrowsize=20)
plt.title("PageRank Example Graph")
plt.show()


# Implementasi Algoritma PageRank

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,3), (2,1), (2,3), (3,1), (3,2), (3,4), (4,5), (5,1), (5,4)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)


#Latihan 1

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (2,3), (3,4), (4,5), (5,6)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0, 0, 0],
                             [0, 0, 1, 0, 0, 0],
                             [0, 0, 0, 1, 0, 0],
                             [0, 0, 0, 0, 0, 1],
                             [0, 0, 0, 0, 0, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


# Latihan 2

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (2,3), (3,4), (4,5), (5,6)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0, 0],
                             [0, 0, 1, 0, 0],
                             [0, 0, 0, 1, 0],
                             [0, 0, 0, 0, 1],
                             [1, 0, 0, 0, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


# Latihan 3

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (2,1), (2,3), (3,2), (3,4), (4,3)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0],
                             [1, 0, 1, 0],
                             [0, 1, 0, 1],
                             [0, 0, 1, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


# Latihan 4

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (2,3), (3,4), (4,5), (5,6)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0, 0, 0],
                             [0, 0, 1, 0, 0, 0],
                             [0, 0, 0, 1, 0, 0],
                             [0, 0, 0, 0, 1, 0],
                             [0, 0, 0, 0, 0, 1],
                             [0, 0, 0, 0, 0, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


# Latihan 5

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (2,1), (2,3), (3,2), (3,4), (4,1), (4,3)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0],
                             [1, 0, 1, 0],
                             [0, 1, 0, 1],
                             [1, 0, 1, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


# Latihan 6

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (2,3), (3,4), (4,1), (4,5), (5,1)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 0, 0, 0],
                             [0, 0, 1, 0, 0],
                             [0, 0, 0, 1, 0],
                             [1, 0, 0, 0, 1],
                             [1, 0, 0, 0, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")


# Tugas DAA

import networkx as nx
import numpy as np

def CtreatePageRank(aGraph):
  nodes_set = len(aGraph)
  M = nx.to_numpy_array(aGraph) #Menggunakan metode to_numpy_array
  outwards = np.squeeze(np.asarray(np.sum(M, axis=1)))
  prob_outwards = np.array(1.0 / outwards)
  G = np.multiply(M, prob_outwards[:, np.newaxis])

  p = np.ones(nodes_set) / float(nodes_set)
  return G, p

# Contoh penggunaan:
myWeb = nx.DiGraph()
connections = [(1,2), (1,3), (2,1), (2,3), (2,4), (2,5), (3,1), (3,2), (3,6), (4,1), (4,2), (4,5), (5,3), (5,4), (5,6), (6,2), (6,3), (6,5)]
myWeb.add_edges_from(connections)

G, p = CtreatePageRank(myWeb)
print(G)

import numpy as np

# Define the adjacency matrix
adjacency_matrix = np.array([[0, 1, 1, 0, 0, 0],
                             [1, 0, 1, 1, 1, 0],
                             [1, 1, 0, 0, 0, 1],
                             [1, 1, 0, 0, 1, 0],
                             [0, 0, 1, 1, 0, 1],
                             [0, 1, 1, 0, 1, 0]])

# Define the adjacency factor
damping_factor = 0.85

# Initialize the PageRank values
num_pages = len(adjacency_matrix)
page_rank = np.ones(num_pages) / num_pages

# Number of iterations
num_iterations = 100

for i in range(num_iterations):
    new_page_rank = np.zeros(num_pages)
    for j in range(num_pages):
      # Calculate the PageRank contribution from each linking page
      linking_pages = [k for k in range(num_pages) if adjacency_matrix[k, j] == 1]
      for linking_page in linking_pages :
        new_page_rank[j] += page_rank[linking_page] / sum(adjacency_matrix[linking_page, :])
      new_page_rank[j] = damping_factor * new_page_rank[j]+(1- damping_factor) / num_pages
    page_rank = new_page_rank

# Print the final PageRank values
for page, rank in enumerate(page_rank):
  print(f"PR(Page {page + 1}) = {rank:.3f}")

